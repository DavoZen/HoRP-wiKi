// HoRP-wiKi - –î–∏–Ω–∞–º—ñ—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
class WikiEngine {
    constructor() {
        this.repoOwner = 'pisdukblaty';
        this.repoName = 'HoRP-wiKi';
        this.baseUrl = `https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/main`;
        this.apiBaseUrl = `https://api.github.com/repos/${this.repoOwner}/${this.repoName}/contents`;
        this.pages = [];
        this.structure = {};
        this.lastScan = null;
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–º—ñ—Å—Ç –ø–∞–ø–∫–∏ –∑ GitHub API
    async fetchFolderContents(path = '') {
        try {
            const response = await fetch(`${this.apiBaseUrl}/${path}`);
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É –ø–∞–ø–∫–∏:', error);
            return [];
        }
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—î—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    async scanRepository() {
        this.showLoading('navMenu', '–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é...');
        
        try {
            this.structure = await this.scanFolder('pages');
            this.pages = this.extractPagesFromStructure(this.structure);
            this.buildNavigation();
            this.updateQuickStats();
            this.lastScan = new Date();
            this.updateLastScanTime();
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
            this.cacheData();
            
        } catch (error) {
            this.showError('navMenu', '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é');
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:', error);
        }
    }

    // –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    async scanFolder(path) {
        const contents = await this.fetchFolderContents(path);
        const folder = {
            name: path.split('/').pop() || 'pages',
            path: path,
            type: 'folder',
            children: []
        };

        for (const item of contents) {
            if (item.type === 'dir') {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω—É—î–º–æ –ø—ñ–¥–ø–∞–ø–∫—É
                const subFolder = await this.scanFolder(item.path);
                folder.children.push(subFolder);
            } else if (item.type === 'file' && item.name.endsWith('.md')) {
                // –î–æ–¥–∞—î–º–æ Markdown —Ñ–∞–π–ª
                folder.children.push({
                    name: item.name.replace('.md', ''),
                    path: item.path.replace('pages/', '').replace('.md', ''),
                    type: 'file',
                    download_url: item.download_url
                });
            }
        }

        return folder;
    }

    // –í–∏–ª—É—á–∏—Ç–∏ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    extractPagesFromStructure(structure) {
        const pages = [];
        
        function traverse(node) {
            if (node.type === 'file') {
                pages.push({
                    title: node.name,
                    path: node.path,
                    url: node.download_url
                });
            } else if (node.children) {
                node.children.forEach(traverse);
            }
        }
        
        traverse(structure);
        return pages;
    }

    // –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
    buildNavigation() {
        const navElement = document.getElementById('navMenu');
        navElement.innerHTML = this.buildNavigationHTML(this.structure);
    }

    // HTML –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    buildNavigationHTML(node, level = 0) {
        if (node.type === 'file') {
            return `
                <div class="nav-item nav-page" style="margin-left: ${level * 15}px">
                    <a href="#" onclick="wiki.loadPage('${node.path}')">${node.name}</a>
                </div>
            `;
        }

        let html = '';
        if (level > 0) {
            html += `
                <div class="nav-item nav-folder" style="margin-left: ${(level - 1) * 15}px" 
                     onclick="this.nextElementSibling.classList.toggle('hidden')">
                    üìÅ ${node.name}
                </div>
                <div class="folder-contents">
            `;
        }

        if (node.children) {
            node.children.forEach(child => {
                html += this.buildNavigationHTML(child, level + 1);
            });
        }

        if (level > 0) {
            html += `</div>`;
        }

        return html;
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    async loadPage(pagePath) {
        this.showMainContent('articleContent');
        this.showLoading('articleContent', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏...');

        try {
            const page = this.pages.find(p => p.path === pagePath);
            if (!page) throw new Error('–°—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');

            const response = await fetch(page.url);
            if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');

            const markdown = await response.text();
            const html = this.convertMarkdownToHtml(markdown);

            document.getElementById('articleContent').innerHTML = `
                <div class="article-nav">
                    <a href="#" onclick="wiki.showMainPage()">–ì–æ–ª–æ–≤–Ω–∞</a> &gt; 
                    ${this.generateBreadcrumbs(pagePath)}
                </div>
                <div class="article-content">
                    ${html}
                </div>
                <div class="article-nav">
                    <small>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${new Date().toLocaleDateString('uk-UA')}</small>
                </div>
            `;

            history.pushState({page: pagePath}, '', `?page=${pagePath}`);
            this.highlightSearchTerms();

        } catch (error) {
            document.getElementById('articleContent').innerHTML = `
                <div class="article-content">
                    <h1>–ü–æ–º–∏–ª–∫–∞ 404</h1>
                    <p>–°—Ç–∞—Ç—Ç—é "<b>${pagePath}</b>" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>
                    <p><a href="#" onclick="wiki.showMainPage()">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É</a></p>
                </div>
            `;
        }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è Markdown –≤ HTML
    convertMarkdownToHtml(markdown) {
        return markdown
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏
            .replace(/^### (.*$)/gim, '<h3>$1</h3>')
            .replace(/^## (.*$)/gim, '<h2>$1</h2>')
            .replace(/^# (.*$)/gim, '<h1>$1</h1>')
            // –ñ–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            // –ö—É—Ä—Å–∏–≤
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            // –ö–æ–¥
            .replace(/`(.*?)`/g, '<code>$1</code>')
            // –ë–ª–æ–∫–∏ –∫–æ–¥—É
            .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre>$2</pre>')
            // –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            .replace(/!\[(.*?)\]\((.*?)\)/g, '<img src="' + this.baseUrl + '/$2" alt="$1" style="max-width:100%">')
            // –ó–æ–≤–Ω—ñ—à–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            .replace(/\[(.*?)\]\((http.*?)\)/g, '<a href="$2" target="_blank">$1</a>')
            // –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            .replace(/\[\[(.*?)\]\]/g, (match, pageName) => {
                const page = this.pages.find(p => p.title === pageName || p.path === pageName);
                return page ? 
                    `<a href="#" onclick="wiki.loadPage('${page.path}')" class="wiki-link">${pageName}</a>` :
                    `<span class="broken-link" title="–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞">${pageName}</span>`;
            })
            // –ê–±–∑–∞—Ü–∏
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ö–ª—ñ–±–Ω–∏—Ö –∫—Ä–∏—Ö—Ç
    generateBreadcrumbs(pagePath) {
        const parts = pagePath.split('/');
        let breadcrumbs = '';
        let currentPath = '';

        parts.forEach((part, index) => {
            currentPath += (currentPath ? '/' : '') + part;
            const isLast = index === parts.length - 1;

            if (isLast) {
                breadcrumbs += part;
            } else {
                breadcrumbs += `<a href="#" onclick="wiki.loadPage('${currentPath}')">${part}</a> / `;
            }
        });

        return breadcrumbs;
    }

    // –ü–æ—à—É–∫
    async performSearch() {
        const query = document.getElementById('searchBox').value || 
                     document.getElementById('mainSearchBox').value;

        if (!query.trim()) {
            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç!');
            return;
        }

        this.showMainContent('searchResults');
        this.showLoading('searchResults', '–ü–æ—à—É–∫...');

        // –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –ø–æ—à—É–∫—É –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        await new Promise(resolve => setTimeout(resolve, 500));

        const results = await this.searchPages(query);
        this.displaySearchResults(results, query);
    }

    // –ü–æ—à—É–∫ –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö
    async searchPages(query) {
        const results = [];
        const lowerQuery = query.toLowerCase();

        for (const page of this.pages) {
            try {
                const response = await fetch(page.url);
                const content = await response.text();
                
                if (page.title.toLowerCase().includes(lowerQuery) || 
                    content.toLowerCase().includes(lowerQuery)) {
                    results.push({
                        ...page,
                        excerpt: this.generateExcerpt(content, query)
                    });
                }
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –≤ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ:', page.title, error);
            }
        }

        return results.sort((a, b) => {
            // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: —Å–ø–µ—Ä—à—É –∑–∞ –∑–±—ñ–≥–æ–º —É –∑–∞–≥–æ–ª–æ–≤–∫—É, –ø–æ—Ç—ñ–º –∑–∞ –∑–±—ñ–≥–æ–º —É –∫–æ–Ω—Ç–µ–Ω—Ç—ñ
            const aTitleMatch = a.title.toLowerCase().includes(lowerQuery);
            const bTitleMatch = b.title.toLowerCase().includes(lowerQuery);
            
            if (aTitleMatch && !bTitleMatch) return -1;
            if (!aTitleMatch && bTitleMatch) return 1;
            return 0;
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É—Ä–∏–≤–∫—É –¥–ª—è –ø–æ—à—É–∫—É
    generateExcerpt(content, query) {
        const lowerContent = content.toLowerCase();
        const lowerQuery = query.toLowerCase();
        const index = lowerContent.indexOf(lowerQuery);
        
        if (index === -1) {
            return content.substring(0, 150) + '...';
        }
        
        const start = Math.max(0, index - 50);
        const end = Math.min(content.length, index + 100);
        let excerpt = content.substring(start, end);
        
        // –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        const regex = new RegExp(`(${query})`, 'gi');
        excerpt = excerpt.replace(regex, '<span class="highlight">$1</span>');
        
        return (start > 0 ? '...' : '') + excerpt + (end < content.length ? '...' : '');
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
    displaySearchResults(results, query) {
        let html = `
            <div class="article-content">
                <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è "${query}"</h1>
                <p>–ó–Ω–∞–π–¥–µ–Ω–æ: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤</p>
        `;

        if (results.length === 0) {
            html += `
                <div class="search-result">
                    <p>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ:</p>
                    <ul>
                        <li>–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–æ–ø–∏—Å</li>
                        <li>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞</li>
                        <li><a href="#" onclick="wiki.showAllPages()">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏</a></li>
                    </ul>
                </div>
            `;
        } else {
            results.forEach(result => {
                html += `
                    <div class="search-result" onclick="wiki.loadPage('${result.path}')" style="cursor: pointer;">
                        <h3>${result.title}</h3>
                        <div class="excerpt">${result.excerpt}</div>
                        <small>–®–ª—è—Ö: ${result.path}</small>
                    </div>
                `;
            });
        }

        html += '</div>';
        document.getElementById('searchResults').innerHTML = html;
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    showAllPages() {
        this.showMainContent('allPages');
        
        let html = `
            <div class="article-content">
                <h1>–í—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (${this.pages.length})</h1>
                <div class="stats-grid">
                    <div class="stat-card">
                        <span class="stat-number">${this.pages.length}</span>
                        <span class="stat-label">–í—Å—å–æ–≥–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.countFolders(this.structure)}</span>
                        <span class="stat-label">–ö–∞—Ç–µ–≥–æ—Ä—ñ–π</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.lastScan ? this.lastScan.toLocaleDateString('uk-UA') : '-'}</span>
                        <span class="stat-label">–û—Å—Ç–∞–Ω–Ω—î —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è</span>
                    </div>
                </div>
                <div class="pages-list">
        `;

        this.pages.forEach(page => {
            html += `
                <div class="search-result" onclick="wiki.loadPage('${page.path}')" style="cursor: pointer;">
                    <h3>${page.title}</h3>
                    <small>–®–ª—è—Ö: ${page.path}</small>
                </div>
            `;
        });

        html += `
                </div>
            </div>
        `;
        
        document.getElementById('allPages').innerHTML = html;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    showStatistics() {
        this.showMainContent('searchResults');
        
        const html = `
            <div class="article-content">
                <h1>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ HoRP-wiKi</h1>
                <div class="stats-grid">
                    <div class="stat-card">
                        <span class="stat-number">${this.pages.length}</span>
                        <span class="stat-label">–°—Ç–æ—Ä—ñ–Ω–æ–∫</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.countFolders(this.structure)}</span>
                        <span class="stat-label">–ö–∞—Ç–µ–≥–æ—Ä—ñ–π</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${localStorage.visitCount || 0}</span>
                        <span class="stat-label">–í—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.lastScan ? this.lastScan.toLocaleDateString('uk-UA') : '-'}</span>
                        <span class="stat-label">–û–Ω–æ–≤–ª–µ–Ω–æ</span>
                    </div>
                </div>
                <div class="article-nav">
                    <h3>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É</h3>
                    <p><strong>–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π:</strong> ${this.repoOwner}/${this.repoName}</p>
                    <p><strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:</strong> ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ</p>
                    <p><strong>–î–∏–Ω–∞–º—ñ—á–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</p>
                    <p><a href="https://github.com/${this.repoOwner}/${this.repoName}" target="_blank">üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ GitHub</a></p>
                </div>
            </div>
        `;
        
        document.getElementById('searchResults').innerHTML = html;
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
    countFolders(node) {
        if (node.type !== 'folder') return 0;
        let count = 1; // –ü–æ—Ç–æ—á–Ω–∞ –ø–∞–ø–∫–∞
        if (node.children) {
            node.children.forEach(child => {
                if (child.type === 'folder') {
                    count += this.countFolders(child);
                }
            });
        }
        return count;
    }

    showMainPage() {
        this.showMainContent('mainSearch');
        history.pushState({}, '', '?');
    }

    showMainContent(contentId) {
        document.querySelectorAll('.main-content').forEach(el => {
            el.classList.add('hidden');
        });
        document.getElementById(contentId).classList.remove('hidden');
    }

    showLoading(elementId, message = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...') {
        document.getElementById(elementId).innerHTML = `
            <div class="loading">
                ${message}
            </div>
        `;
    }

    showError(elementId, message) {
        document.getElementById(elementId).innerHTML = `
            <div style="color: red; text-align: center; padding: 20px;">
                ‚ùå ${message}
            </div>
        `;
    }

    updateQuickStats() {
        document.getElementById('quickStats').innerHTML = `
            üìä <strong>${this.pages.length}</strong> —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —É <strong>${this.countFolders(this.structure)}</strong> –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö<br>
            <small>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: ${this.lastScan ? this.lastScan.toLocaleTimeString('uk-UA') : '—â–æ–π–Ω–æ'}</small>
        `;
    }

    updateLastScanTime() {
        document.getElementById('lastUpdate').textContent = 
            `–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${this.lastScan ? this.lastScan.toLocaleString('uk-UA') : '-'}`;
    }

    // –í–∏–ø–∞–¥–∫–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    showRandomPage() {
        if (this.pages.length > 0) {
            const randomPage = this.pages[Math.floor(Math.random() * this.pages.length)];
            this.loadPage(randomPage.path);
        } else {
            alert('–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É!');
        }
    }

    // –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    cacheData() {
        const cache = {
            pages: this.pages,
            structure: this.structure,
            lastScan: this.lastScan
        };
        localStorage.setItem('wikiCache', JSON.stringify(cache));
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à—É
    loadFromCache() {
        const cached = localStorage.getItem('wikiCache');
        if (cached) {
            try {
                const cache = JSON.parse(cached);
                this.pages = cache.pages || [];
                this.structure = cache.structure || {};
                this.lastScan = cache.lastScan ? new Date(cache.lastScan) : null;
                return true;
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à—É:', error);
            }
        }
        return false;
    }

    // –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤
    highlightSearchTerms() {
        const urlParams = new URLSearchParams(window.location.search);
        const search = urlParams.get('search');
        if (search) {
            setTimeout(() => {
                const elements = document.querySelectorAll('.article-content');
                elements.forEach(el => {
                    const regex = new RegExp(`(${search})`, 'gi');
                    el.innerHTML = el.innerHTML.replace(regex, '<span class="highlight">$1</span>');
                });
            }, 100);
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    async init() {
        // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤
        if (!localStorage.visitCount) localStorage.visitCount = 0;
        localStorage.visitCount++;
        document.getElementById('pageCounter').textContent = `–í—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤: ${localStorage.visitCount}`;

        // –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ –∫–µ—à—É
        if (this.loadFromCache()) {
            this.buildNavigation();
            this.updateQuickStats();
            this.updateLastScanTime();
        }

        // –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        await this.scanRepository();

        // –û–±—Ä–æ–±–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ URL
        const urlParams = new URLSearchParams(window.location.search);
        const page = urlParams.get('page');
        const search = urlParams.get('search');

        if (search) {
            document.getElementById('mainSearchBox').value = search;
            setTimeout(() => this.performSearch(), 1000);
        } else if (page) {
            this.loadPage(page);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const wiki = new WikiEngine();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
document.addEventListener('DOMContentLoaded', () => {
    wiki.init();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è onclick
function showMainPage() { wiki.showMainPage(); }
function showAllPages() { wiki.showAllPages(); }
function showRandomPage() { wiki.showRandomPage(); }
function showStatistics() { wiki.showStatistics(); }
function performSearch() { wiki.performSearch(); }
function scanRepository() { wiki.scanRepository(); }

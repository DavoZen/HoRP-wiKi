class HoRPWiki {
    constructor() {
        this.pages = [];
        this.currentTheme = localStorage.getItem('wiki-theme') || 'light';
        this.init();
    }

    async init() {
        console.log('üèÅ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è HoRP-wiKi...');
        
        this.setupTheme();
        this.setupEventListeners();
        this.loadTestData(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–º—ñ—Å—Ç—å GitHub
        this.updateUI();
        
        console.log('‚úÖ HoRP-wiKi –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏');
    }

    setupTheme() {
        document.documentElement.setAttribute('data-theme', this.currentTheme);
        
        document.querySelectorAll('.theme-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.theme === this.currentTheme);
        });
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–º–∏–∫–∞—á—ñ —Ç–µ–º–∏
        document.querySelectorAll('.theme-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.currentTheme = e.target.dataset.theme;
                localStorage.setItem('wiki-theme', this.currentTheme);
                this.setupTheme();
            });
        });

        // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        document.querySelectorAll('.nav-item[data-section]').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                this.showSection(item.dataset.section);
                
                document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
                item.classList.add('active');
            });
        });

        // –ü–æ—à—É–∫
        const searchInput = document.getElementById('searchInput');
        searchInput.addEventListener('input', (e) => this.handleSearchInput(e.target.value));
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.performSearch();
        });
    }

    // –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    loadTestData() {
        console.log('üìù –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...');
        
        this.pages = [
            {
                title: '–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞',
                path: 'main',
                content: `# –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ HoRP-wiKi

## –©–æ —Ç–∞–∫–µ HoRP-wiKi?

–¶–µ –≤—ñ–ª—å–Ω–∞ –µ–Ω—Ü–∏–∫–ª–æ–ø–µ–¥—ñ—è, —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–æ—é HoRP. –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä—ñ–∑–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É.

## –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏

- **–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è** - —Å—Ç–∞—Ç—Ç—ñ –ø—Ä–æ –º–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
- **–ù–∞—É–∫–∞** - –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∑ —Ñ—ñ–∑–∏–∫–∏, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Ö—ñ–º—ñ—ó
- **–Ü—Å—Ç–æ—Ä—ñ—è** - —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –ø–æ–¥—ñ—ó —Ç–∞ —Ñ–∞–∫—Ç–∏
- **–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ** - –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞, –º—É–∑–∏–∫–∞, –∂–∏–≤–æ–ø–∏—Å

## –Ø–∫ –¥–æ–ª—É—á–∏—Ç–∏—Å—è?

–ö–æ–∂–µ–Ω –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–∞ –¥–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ. –î–ª—è —Ü—å–æ–≥–æ:
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Å—Ç–∞—Ç—Ç—ñ
2. –í–Ω–µ—Å—ñ—Ç—å –∑–º—ñ–Ω–∏ —É —Ç–µ–∫—Å—Ç
3. –ó–±–µ—Ä–µ–∂—ñ—Ç—å –∑–º—ñ–Ω–∏

**–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏!**`,
                category: '–û—Å–Ω–æ–≤–Ω–µ'
            },
            {
                title: 'Python',
                path: 'programming/python',
                content: `# Python

Python - —Ü–µ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–æ–≤–∞–Ω–∞, –æ–±'—î–∫—Ç–Ω–æ-–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –≤–∏—Å–æ–∫–æ–≥–æ —Ä—ñ–≤–Ω—è.

## –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ

- –ü—Ä–æ—Å—Ç–∏–π —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
- –î–∏–Ω–∞–º—ñ—á–Ω–∞ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—è
- –í–µ–ª–∏–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞
- –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–∞—Ä–∞–¥–∏–≥–º –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è

## –ü—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É

\`\`\`python
def hello_world():
    print("–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!")
    
hello_world()
\`\`\`

## –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è

- –í–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∞ (Django, Flask)
- –ù–∞—É–∫–∞ –ø—Ä–æ –¥–∞–Ω—ñ
- –ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è`,
                category: '–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è'
            },
            {
                title: '–§—ñ–∑–∏–∫–∞',
                path: 'science/physics',
                content: `# –§—ñ–∑–∏–∫–∞

–§—ñ–∑–∏–∫–∞ - —Ü–µ –ø—Ä–∏—Ä–æ–¥–Ω–∏—á–∞ –Ω–∞—É–∫–∞, —â–æ –≤–∏–≤—á–∞—î –∑–∞–≥–∞–ª—å–Ω—ñ –∑–∞–∫–æ–Ω–∏ –ø—Ä–∏—Ä–æ–¥–∏.

## –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏

### –ú–µ—Ö–∞–Ω—ñ–∫–∞
–í–∏–≤—á–∞—î —Ä—É—Ö —Ç—ñ–ª —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –º—ñ–∂ –Ω–∏–º–∏.

### –¢–µ—Ä–º–æ–¥–∏–Ω–∞–º—ñ–∫–∞
–î–æ—Å–ª—ñ–¥–∂—É—î —Ç–µ–ø–ª–æ–≤—ñ —è–≤–∏—â–∞.

### –ï–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–µ—Ç–∏–∑–º
–í–∏–≤—á–∞—î –µ–ª–µ–∫—Ç—Ä–∏—á–Ω—ñ —Ç–∞ –º–∞–≥–Ω—ñ—Ç–Ω—ñ —è–≤–∏—â–∞.

## –í–∞–∂–ª–∏–≤—ñ –∑–∞–∫–æ–Ω–∏

- **–ó–∞–∫–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó**
- **–î—Ä—É–≥–∏–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞**
- **–ó–∞–∫–æ–Ω –≤—Å–µ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ç—è–∂—ñ–Ω–Ω—è**`,
                category: '–ù–∞—É–∫–∞'
            },
            {
                title: '–£–∫—Ä–∞—ó–Ω–∞',
                path: 'history/ukraine',
                content: `# –£–∫—Ä–∞—ó–Ω–∞

–£–∫—Ä–∞—ó–Ω–∞ - –¥–µ—Ä–∂–∞–≤–∞ –≤ –°—Ö—ñ–¥–Ω—ñ–π –Ñ–≤—Ä–æ–ø—ñ.

## –Ü—Å—Ç–æ—Ä—ñ—è

### –ö–∏—ó–≤—Å—å–∫–∞ –†—É—Å—å
–ü–µ—Ä—à–∞ —Å—Ö—ñ–¥–Ω–æ—Å–ª–æ–≤'—è–Ω—Å—å–∫–∞ –¥–µ—Ä–∂–∞–≤–∞ –∑ —Ü–µ–Ω—Ç—Ä–æ–º —É –ö–∏—î–≤—ñ.

### –ö–æ–∑–∞—Ü—Ç–≤–æ
–í—ñ–ª—å–Ω–µ –≤—ñ–π—Å—å–∫–æ–≤–µ —Ç–æ–≤–∞—Ä–∏—Å—Ç–≤–æ, —â–æ —ñ—Å–Ω—É–≤–∞–ª–æ –≤ XVI-XVIII —Å—Ç–æ–ª—ñ—Ç—Ç—è—Ö.

### –°—É—á–∞—Å–Ω—ñ—Å—Ç—å
–ù–µ–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞ 24 —Å–µ—Ä–ø–Ω—è 1991 —Ä–æ–∫—É.

## –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è

- **–ü–ª–æ—â–∞**: 603,628 –∫–º¬≤
- **–ù–∞—Å–µ–ª–µ–Ω–Ω—è**: –±–ª–∏–∑—å–∫–æ 40 –º—ñ–ª—å–π–æ–Ω—ñ–≤
- **–°—Ç–æ–ª–∏—Ü—è**: –ö–∏—ó–≤`,
                category: '–Ü—Å—Ç–æ—Ä—ñ—è'
            },
            {
                title: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                path: 'science/mathematics',
                content: `# –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞

–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –Ω–∞—É–∫–∞ –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø—Ä–æ—Å—Ç—ñ—Ä —Ç–∞ –∑–º—ñ–Ω—É.

## –û—Å–Ω–æ–≤–Ω—ñ –≥–∞–ª—É–∑—ñ

### –ê–ª–≥–µ–±—Ä–∞
–í–∏–≤—á–∞—î –æ–ø–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è.

### –ì–µ–æ–º–µ—Ç—Ä—ñ—è
–î–æ—Å–ª—ñ–¥–∂—É—î –ø—Ä–æ—Å—Ç–æ—Ä–æ–≤—ñ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è.

### –ê–Ω–∞–ª—ñ–∑
–ó–∞–Ω–∏–º–∞—î—Ç—å—Å—è –ø—Ä–µ–¥–µ–ª–∞–º–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞–º–∏.

## –í–∞–∂–ª–∏–≤—ñ –ø–æ–Ω—è—Ç—Ç—è

- –ß–∏—Å–ª–∞
- –§—É–Ω–∫—Ü—ñ—ó
- –†—ñ–≤–Ω—è–Ω–Ω—è
- –¢–µ–æ—Ä–µ–º–∏`,
                category: '–ù–∞—É–∫–∞'
            },
            {
                title: 'JavaScript',
                path: 'programming/javascript',
                content: `# JavaScript

JavaScript - –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–æ–∫.

## –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ

- –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ
- –î–∏–Ω–∞–º—ñ—á–Ω–∞ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—è
- –ü–æ–¥—ñ—î–≤–æ-–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∞
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è

## –°–∏–Ω—Ç–∞–∫—Å–∏—Å

\`\`\`javascript
// –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
function greet(name) {
    return '–ü—Ä–∏–≤—ñ—Ç, ' + name + '!';
}

console.log(greet('—Å–≤—ñ—Ç–µ'));
\`\`\``,
                category: '–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è'
            },
            {
                title: '–•—ñ–º—ñ—è',
                path: 'science/chemistry',
                content: `# –•—ñ–º—ñ—è

–•—ñ–º—ñ—è - –Ω–∞—É–∫–∞ –ø—Ä–æ —Ä–µ—á–æ–≤–∏–Ω–∏, —ó—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è.

## –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏

### –û—Ä–≥–∞–Ω—ñ—á–Ω–∞ —Ö—ñ–º—ñ—è
–í–∏–≤—á–∞—î —Å–ø–æ–ª—É–∫–∏ –≤—É–≥–ª–µ—Ü—é.

### –ù–µ–æ—Ä–≥–∞–Ω—ñ—á–Ω–∞ —Ö—ñ–º—ñ—è
–î–æ—Å–ª—ñ–¥–∂—É—î —ñ–Ω—à—ñ —Ö—ñ–º—ñ—á–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏.

### –§—ñ–∑–∏—á–Ω–∞ —Ö—ñ–º—ñ—è
–ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–∑–∏—á–Ω—ñ –º–µ—Ç–æ–¥–∏.

## –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞

–°–∏—Å—Ç–µ–º–∞ —Ö—ñ–º—ñ—á–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —É–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–∞ –∑–∞ –∞—Ç–æ–º–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏.`,
                category: '–ù–∞—É–∫–∞'
            },
            {
                title: '–õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞',
                path: 'art/literature',
                content: `# –õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞

–õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –º–∏—Å—Ç–µ—Ü—Ç–≤–æ —Å–ª–æ–≤–∞, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –∂–∏—Ç—Ç—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–æ–≤–∏.

## –ñ–∞–Ω—Ä–∏

### –ü–æ–µ–∑—ñ—è
–í—ñ—Ä—à–æ–≤–∞–Ω—ñ —Ç–≤–æ—Ä–∏ –∑ —Ä–∏—Ç–º–æ–º —Ç–∞ —Ä–∏–º–æ—é.

### –ü—Ä–æ–∑–∞
–û–ø–æ–≤—ñ–¥–Ω—ñ —Ç–≤–æ—Ä–∏ –±–µ–∑ –≤—ñ—Ä—à–æ–≤–∞–Ω–æ—ó —Ñ–æ—Ä–º–∏.

### –î—Ä–∞–º–∞
–¢–≤–æ—Ä–∏, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–ª—è —Å—Ü–µ–Ω—ñ—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.

## –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞

–ë–∞–≥–∞—Ç–∞ —Å–ø–∞–¥—â–∏–Ω–∞ –≤—ñ–¥ "–°–ª–æ–≤–∞ –æ –ø–æ–ª–∫—É –Ü–≥–æ—Ä–µ–≤—ñ–º" –¥–æ —Å—É—á–∞—Å–Ω–∏—Ö –∞–≤—Ç–æ—Ä—ñ–≤.`,
                category: '–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ'
            }
        ];

        console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.pages.length} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫`);
    }

    // –ü–æ—à—É–∫
    handleSearchInput(query) {
        if (query.length < 2) return;
        this.performSearch(query);
    }

    performSearch(query = null) {
        const searchQuery = query || document.getElementById('searchInput').value.trim();
        
        if (!searchQuery) {
            this.showSection('main');
            return;
        }

        this.showSection('search');
        
        const results = this.searchPages(searchQuery);
        this.displaySearchResults(results, searchQuery);
    }

    searchPages(query) {
        const lowerQuery = query.toLowerCase();
        return this.pages.filter(page => 
            page.title.toLowerCase().includes(lowerQuery) ||
            page.content.toLowerCase().includes(lowerQuery) ||
            page.category.toLowerCase().includes(lowerQuery)
        );
    }

    displaySearchResults(results, query) {
        const container = document.getElementById('searchResults');
        const meta = document.getElementById('searchMeta');

        if (results.length === 0) {
            container.innerHTML = `
                <div class="no-results">
                    <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p>–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è "<strong>${query}</strong>"</p>
                    <p>–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∞–±–æ <a href="#" onclick="wiki.showSection('articles')">–ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—Å—ñ —Å—Ç–∞—Ç—Ç—ñ</a>.</p>
                </div>
            `;
            meta.textContent = `0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è "${query}"`;
            return;
        }

        meta.textContent = `${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è "${query}"`;
        container.innerHTML = results.map(result => `
            <div class="search-result" onclick="wiki.loadPage('${result.path}')">
                <h3>${this.highlightText(result.title, query)}</h3>
                <div class="search-path">${result.path}</div>
                <div class="search-category">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${result.category}</div>
                <div class="search-excerpt">${this.generateExcerpt(result.content, query)}</div>
            </div>
        `).join('');
    }

    highlightText(text, query) {
        const regex = new RegExp(`(${this.escapeRegex(query)})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
    }

    generateExcerpt(content, query) {
        const index = content.toLowerCase().indexOf(query.toLowerCase());
        if (index === -1) return content.substring(0, 150) + '...';
        
        const start = Math.max(0, index - 50);
        const end = Math.min(content.length, index + 100);
        let excerpt = content.substring(start, end);
        
        const regex = new RegExp(`(${this.escapeRegex(query)})`, 'gi');
        excerpt = excerpt.replace(regex, '<mark>$1</mark>');
        
        return (start > 0 ? '...' : '') + excerpt + (end < content.length ? '...' : '');
    }

    escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    showSection(sectionName) {
        document.querySelectorAll('.content-section').forEach(section => {
            section.classList.remove('active');
        });

        const targetSection = document.getElementById(`${sectionName}-section`);
        if (targetSection) {
            targetSection.classList.add('active');
            this.updateSectionContent(sectionName);
        }
    }

    updateSectionContent(sectionName) {
        switch (sectionName) {
            case 'main':
                this.updateMainPage();
                break;
            case 'articles':
                this.updateArticlesPage();
                break;
            case 'categories':
                this.updateCategoriesPage();
                break;
        }
    }

    updateMainPage() {
        this.updatePopularArticles();
        this.updateMainCategories();
    }

    updatePopularArticles() {
        const container = document.getElementById('popularArticles');
        const popular = this.pages.slice(0, 8);
        
        container.innerHTML = popular.map(page => `
            <a href="#" class="article-link" onclick="wiki.loadPage('${page.path}')">${page.title}</a>
        `).join('');
    }

    updateMainCategories() {
        const container = document.getElementById('mainCategories');
        const categories = this.getCategoriesWithCounts().slice(0, 8);
        
        container.innerHTML = categories.map(cat => `
            <a href="#" class="category-link" onclick="wiki.showCategory('${cat.name}')">${cat.name} (${cat.count})</a>
        `).join('');
    }

    updateArticlesPage() {
        const container = document.getElementById('articlesList');
        const count = document.getElementById('articlesCount');
        
        count.textContent = `${this.pages.length} —Å—Ç–∞—Ç–µ–π`;
        container.innerHTML = this.pages.map(page => `
            <div class="article-card" onclick="wiki.loadPage('${page.path}')">
                <h3>${page.title}</h3>
                <div class="article-path">${page.path}</div>
                <div class="article-category">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${page.category}</div>
            </div>
        `).join('');
    }

    updateCategoriesPage() {
        const container = document.getElementById('categoriesGrid');
        const categories = this.getCategoriesWithCounts();
        
        container.innerHTML = categories.map(cat => `
            <div class="category-card" onclick="wiki.showCategory('${cat.name}')">
                <h3>${cat.name}</h3>
                <div class="category-stats">${cat.count} —Å—Ç–∞—Ç–µ–π</div>
                <div class="category-preview">
                    ${this.getCategoryPreview(cat.name).map(page => `
                        <div><a href="#" onclick="wiki.loadPage('${page.path}')">${page.title}</a></div>
                    `).join('')}
                </div>
            </div>
        `).join('');
    }

    getCategoriesWithCounts() {
        const categories = {};
        
        this.pages.forEach(page => {
            categories[page.category] = (categories[page.category] || 0) + 1;
        });

        return Object.entries(categories)
            .map(([name, count]) => ({ name, count }))
            .sort((a, b) => b.count - a.count);
    }

    getCategoryPreview(categoryName) {
        return this.pages
            .filter(page => page.category === categoryName)
            .slice(0, 5);
    }

    showCategory(categoryName) {
        this.showSection('articles');
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ
    loadPage(pagePath) {
        this.showSection('article');

        const page = this.pages.find(p => p.path === pagePath);
        if (!page) {
            this.showError('–°—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'articleContent');
            return;
        }

        this.displayArticle(page);
    }

    displayArticle(page) {
        document.getElementById('articleTitle').textContent = page.title;
        this.updateBreadcrumbs(page);
        
        document.getElementById('articleModified').textContent = `–í–æ—Å—Ç–∞–Ω–Ω—î —Ä–µ–¥–∞–≥—É–≤–∞–ª–æ—Å—è: ${new Date().toLocaleDateString('uk-UA')}`;
        
        const htmlContent = this.convertMarkdownToHtml(page.content);
        document.getElementById('articleContent').innerHTML = htmlContent;
        
        this.updateArticleInfo(page);
    }

    updateBreadcrumbs(page) {
        const parts = page.path.split('/');
        let breadcrumbs = '<a href="#" onclick="wiki.showSection(\'main\')">–ì–æ–ª–æ–≤–Ω–∞</a>';
        let currentPath = '';

        parts.forEach((part, index) => {
            currentPath += (currentPath ? '/' : '') + part;
            const isLast = index === parts.length - 1;
            
            if (isLast) {
                breadcrumbs += ` ‚Ä∫ <span>${part}</span>`;
            } else {
                breadcrumbs += ` ‚Ä∫ <a href="#" onclick="wiki.loadPage('${currentPath}')">${part}</a>`;
            }
        });

        document.getElementById('breadcrumbs').innerHTML = breadcrumbs;
    }

    convertMarkdownToHtml(markdown) {
        return markdown
            .replace(/^### (.*$)/gim, '<h3>$1</h3>')
            .replace(/^## (.*$)/gim, '<h2>$1</h2>')
            .replace(/^# (.*$)/gim, '<h1>$1</h1>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre><code>$2</code></pre>')
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>');
    }

    updateArticleInfo(page) {
        const categories = document.getElementById('articleCategories');
        categories.innerHTML = `<a href="#" onclick="wiki.showCategory('${page.category}')">${page.category}</a>`;

        const related = this.getRelatedArticles(page);
        const relatedContainer = document.getElementById('relatedArticles');
        relatedContainer.innerHTML = related.map(rel => `
            <div><a href="#" onclick="wiki.loadPage('${rel.path}')">${rel.title}</a></div>
        `).join('');
    }

    getRelatedArticles(page) {
        return this.pages
            .filter(p => p.category === page.category && p.path !== page.path)
            .slice(0, 5);
    }

    showError(message, elementId = null) {
        const target = elementId ? document.getElementById(elementId) : 
            document.querySelector('.content-section.active');
        
        if (target) {
            target.innerHTML = `
                <div class="error">
                    <h3>–ü–æ–º–∏–ª–∫–∞</h3>
                    <p>${message}</p>
                    <button onclick="wiki.showSection('main')" class="action-btn">–ù–∞ –≥–æ–ª–æ–≤–Ω—É</button>
                </div>
            `;
        }
    }

    updateUI() {
        this.updateStats();
        this.updateSidebar();
        this.updateMainPage();
    }

    updateStats() {
        document.getElementById('statArticles').textContent = this.pages.length;
        document.getElementById('statCategories').textContent = this.getCategoriesWithCounts().length;
        document.getElementById('statUpdated').textContent = '—Å—å–æ–≥–æ–¥–Ω—ñ';
        
        document.getElementById('footerArticles').textContent = `${this.pages.length} —Å—Ç–∞—Ç–µ–π`;
        document.getElementById('footerCategories').textContent = `${this.getCategoriesWithCounts().length} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π`;
    }

    updateSidebar() {
        const container = document.getElementById('sidebarNav');
        const categories = this.getCategoriesWithCounts();
        
        container.innerHTML = categories.map(cat => `
            <a href="#" class="nav-link" onclick="wiki.showCategory('${cat.name}')">
                ${cat.name} <small>(${cat.count})</small>
            </a>
        `).join('');
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    editArticle() {
        alert('–§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ GitHub');
    }

    shareArticle() {
        const title = document.getElementById('articleTitle').textContent;
        const url = window.location.href;
        
        if (navigator.share) {
            navigator.share({
                title: title,
                url: url
            });
        } else {
            navigator.clipboard.writeText(url);
            alert('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const wiki = new HoRPWiki();

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è HTML
function performSearch() {
    wiki.performSearch();
}

function handleSearchKeypress(event) {
    if (event.key === 'Enter') {
        performSearch();
    }
}

function showSection(section) {
    wiki.showSection(section);
}

function showRandomPage() {
    if (wiki.pages.length > 0) {
        const randomPage = wiki.pages[Math.floor(Math.random() * wiki.pages.length)];
        wiki.loadPage(randomPage.path);
    }
}

function refreshData() {
    window.location.reload();
}
